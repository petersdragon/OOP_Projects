package POS_Problem_Domain;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.*;

/**
 * Information regarding a given item for sale in the store
 */
public class Item {

	/**
	 * The identification number of the item available on the shelf
	 */
	private String number;
	/**
	 * A description providing information about the item available for sale.
	 */
	private String description;
	/**
	 * Information about the item selected for sale
	 */
	private Collection<SaleLineItem> saleLineItems;
	/**
	 * Universal Product Codes for the item
	 */
	private TreeMap<String, UPC> upcs;
	/**
	 * The different prices for the item. This is dependent on date, such as when there is a sale price in effect for a short time.
	 */
	private TreeSet<Price> prices;
	/**
	 * The tax category of the item being sold
	 */
	private TaxCategory taxCategory;

	public String getNumber() {
		return this.number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Collection<SaleLineItem> getSaleLineItems() {
		return this.saleLineItems;
	}

	public void setSaleLineItems(Collection<SaleLineItem> saleLineItems) {
		this.saleLineItems = saleLineItems;
	}

	public TreeMap<String, UPC> getUpcs() {
		return this.upcs;
	}

	public void setUpcs(TreeMap<String, UPC> upcs) {
		this.upcs = upcs;
	}

	public TreeSet<Price> getPrices() {
		return this.prices;
	}

	public void setPrices(TreeSet<Price> prices) {
		this.prices = prices;
	}

	public TaxCategory getTaxCategory() {
		return this.taxCategory;
	}

	public void setTaxCategory(TaxCategory taxCategory) {
		this.taxCategory = taxCategory;
	}

	/**
	 * Default Constructor
	 */
	public Item() {
		// TODO - implement Item.Item
		throw new UnsupportedOperationException();
	}

	/**
	 * Constructor initializes the number of the item on the shelf and a description for that item
	 * @param number
	 * @param description
	 */
	public Item(String number, String description) {
		// TODO - implement Item.Item
		throw new UnsupportedOperationException();
	}

	/**
	 * Add a regular or sale price to the item
	 * @param price
	 */
	public void addPrice(Price price) {
		this.prices.add(price);
	}

	/**
	 * Remove a regular or sale price from the item
	 * @param price
	 */
	public void removePrice(Price price) {
		this.prices.remove(price);
	}

	/**
	 * Add a valid UPC to the item
	 * @param upc
	 */
	public void addUPC(UPC upc) {
		this.upcs.put(upc.getUpc(), upc);
	}

	/**
	 * Remove a UPC from the item
	 * @param upc
	 */
	public void removeUPC(UPC upc) {
		// TODO - implement Item.removeUPC
		throw new UnsupportedOperationException();
	}

	/**
	 * Determine the price of the item on a given date
	 * @param date
	 */
	public Price getPriceForDate(LocalDate date) {
		// TODO - implement Item.getPriceForDate
		throw new UnsupportedOperationException();
	}

	/**
	 * Determine the tax rate for an item on a given date
	 * @param date
	 */
	public BigDecimal getTaxRateForDate(LocalDate date) {
		// TODO - implement Item.getTaxRateForDate
		throw new UnsupportedOperationException();
	}

	/**
	 * Determine the total cost of the item multiplied by the quantity being sold for a given date
	 * @param date
	 * @param quantity
	 */
	public BigDecimal calcAmountForDateQty(LocalDate date, int quantity) {
		// TODO - implement Item.calcAmountForDateQty
		throw new UnsupportedOperationException();
	}

	/**
	 * Format the relevant information regarding an Item into a single string that can be printed to a display
	 */
	public String toString() {
		// TODO - implement Item.toString
		throw new UnsupportedOperationException();
	}


}